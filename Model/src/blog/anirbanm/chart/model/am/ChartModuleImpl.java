package blog.anirbanm.chart.model.am;

import blog.anirbanm.chart.model.am.common.ChartModule;
import blog.anirbanm.chart.model.vo.DepartmentsVORowImpl;
import blog.anirbanm.chart.model.vo.EmployeesVORowImpl;
import blog.anirbanm.chart.viewmodel.types.Department;
import blog.anirbanm.chart.viewmodel.types.Employee;

import java.util.ArrayList;
import java.util.List;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 16 22:19:51 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ChartModuleImpl extends ApplicationModuleImpl implements ChartModule {
    /**
     * This is the default constructor (do not remove).
     */
    public ChartModuleImpl() {
    }
    
    public List<Department> buildDataModel() {
        final ViewObjectImpl departmentsView = getDepartmentsVO1();
        departmentsView.setRangeSize(-1);
        departmentsView.executeQuery();
        return getDepartments(departmentsView.getAllRowsInRange());
    }
    
    private List<Department> getDepartments(final Row[] departmentRows) {
        final List<Department> departments = new ArrayList<Department>();
        for (final Row row : departmentRows) {
            final DepartmentsVORowImpl departmentRow = (DepartmentsVORowImpl) row;
            final Department department = new Department(departmentRow.getDepartmentId(),
                                                         departmentRow.getDepartmentName(),
                                                         departmentRow.getManagerId(),
                                                         departmentRow.getLocationId());
            final List<Employee> employees = getEmployees(departmentRow);
            department.setEmployees(employees);
            departments.add(department);
        }
        return departments;
    }
    
    private List<Employee> getEmployees(final DepartmentsVORowImpl departmentRow) {
        final List<Employee> employees = new ArrayList<Employee>();
        final RowIterator ri = departmentRow.getEmployeesVO();
        while (ri.hasNext()) {
            EmployeesVORowImpl employeeRow = (EmployeesVORowImpl) ri.next();
            Employee employee = new Employee();
            employee.setEmployeeId(employeeRow.getEmployeeId());
            employee.setFirstName(employeeRow.getFirstName());
            employee.setLastName(employeeRow.getLastName());
            employee.setEmail(employeeRow.getEmail());
            employee.setHireDate(employeeRow.getHireDate());
            employee.setJobId(employeeRow.getJobId());
            employee.setSalary(employeeRow.getSalary());
            employee.setCommissionPct(employeeRow.getCommissionPct());
            employee.setManagerId(employeeRow.getManagerId());
            employee.setDepartmentId(employeeRow.getDepartmentId());
            employees.add(employee);
        }
        return employees;
    }

    /**
     * Container's getter for DepartmentsVO1.
     * @return DepartmentsVO1
     */
    public ViewObjectImpl getDepartmentsVO1() {
        return (ViewObjectImpl) findViewObject("DepartmentsVO1");
    }

    /**
     * Container's getter for EmployeesVO1.
     * @return EmployeesVO1
     */
    public ViewObjectImpl getEmployeesVO1() {
        return (ViewObjectImpl) findViewObject("EmployeesVO1");
    }

    /**
     * Container's getter for DepartmentToEmployeesVL1.
     * @return DepartmentToEmployeesVL1
     */
    public ViewLinkImpl getDepartmentToEmployeesVL1() {
        return (ViewLinkImpl) findViewLink("DepartmentToEmployeesVL1");
    }
}

